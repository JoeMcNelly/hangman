var gl;
var canvas;
var vBuffer = [];
var cBuffer = [];
var nBuffer = [];
var numTimesToSubdivide = 5;
var MAXNUM=1000; //maximum number of vertices, adjust as needed
var index=0; //pointer to current location in buffer

var colors = [vec4(0.4,0.0,0.0,1.0),//red
              vec4(0.0,0.4,0.0,1.0),//green
			  vec4(0.0,0.0,0.4,1.0),//blue
              vec4(0,0,0,1),//black
              vec4(1,1,1,1)//white
            ]
var torsoPoints = [
    vec4( -0.25, -2,  0.2, 1.0 ),
    vec4( -0.25,  2,  0.2, 1.0 ),
    vec4( 0.15,  2,  0.2, 1.0 ),
    vec4( 0.15, -2,  0.2, 1.0 ),
    vec4( -0.15, -2, -0.2, 1.0 ),
    vec4( -0.15,  2, -0.2, 1.0 ),
    vec4( 0.25,  2, -0.2, 1.0 ),
    vec4( 0.25, -2, -0.2, 1.0 )
];
var near = -10;
var far = 10;
var radius = 2.5;
var theta  = 0.0;
var phi    = 0.0;
var dr = 5.0 * Math.PI/180.0;

var left = -6;
var right = 6;
var ytop =6;
var bottom = -6;

var va = vec4(0.0, 0.0, -1.0,1);
var vb = vec4(0.0, 0.942809, 0.333333, 1);
var vc = vec4(-0.816497, -0.471405, 0.333333, 1);
var vd = vec4(0.816497, -0.471405, 0.333333,1);
    
var lightPosition = vec4(1, -1, 1, 0.0 );
var lightAmbient = vec4(0.2, 0.2, 0.2, 1.0 );
var lightDiffuse = vec4( 1.0, 1.0, 1.0, 1.0 );
var lightSpecular = vec4( 1.0, 1.0, 1.0, 1.0 );

var materialAmbient = vec4( 1.0, 0.0, 1.0, 1.0 );
var materialDiffuse = vec4( 1.0, 0.8, 0.0, 1.0 );
var materialSpecular = vec4( 1.0, 0.9, 0.0, 1.0 );
var materialShininess = 100.0;

var ctm;
var ambientColor, diffuseColor, specularColor;

var modelViewMatrix, projectionMatrix;
var modelViewMatrixLoc, projectionMatrixLoc;
var eye;
var at = vec3(0.0, 0.0, 0.0);
var up = vec3(0.0, 1.0, 0.0);
var score = 0;

function quad(a, b, c, d) {
    
    var pa = torsoPoints[a];
    var pb = torsoPoints[b];
    var pc = torsoPoints[c];
    var pd = torsoPoints[d];

     vBuffer.push(torsoPoints[a]); 
     //colorsArray.push(vertexColors[a]); 
     //texCoordsArray.push(texCoord[0]);
    
     vBuffer.push(torsoPoints[b]); 
     //colorsArray.push(vertexColors[a]);
     //texCoordsArray.push(texCoord[1]); 

     vBuffer.push(torsoPoints[c]); 
     //colorsArray.push(vertexColors[a]);
     //texCoordsArray.push(texCoord[2]); 
   
     vBuffer.push(torsoPoints[a]); 
     //colorsArray.push(vertexColors[a]);
     //texCoordsArray.push(texCoord[0]); 

     vBuffer.push(torsoPoints[c]); 
     //colorsArray.push(vertexColors[a]);
     //texCoordsArray.push(texCoord[2]); 

     vBuffer.push(torsoPoints[d]); 
     //colorsArray.push(vertexColors[a]);
     //texCoordsArray.push(texCoord[3]);
     
     
    var t1 = subtract(pb,pa)
	var t2 = subtract(pc,pa)
	var norm = normalize(cross(t1,t2));
	norm = vec4(norm);
	for (var i=0; i<6; i++){
		nBuffer.push(norm);
	}
    
}

function torso()
{
    quad( 1, 0, 3, 2 );
    quad( 2, 3, 7, 6 );
    quad( 3, 0, 4, 7 );
    quad( 6, 5, 1, 2 );
    quad( 4, 5, 6, 7 );
    quad( 5, 4, 0, 1 );
}


function triangle(a,b,c){
	var t1 = subtract(b,a)
	var t2 = subtract(c,a)
	var norm = normalize(cross(t1,t2));
	norm = vec4(norm);
	for (var i=0; i<3; i++){
		nBuffer.push(norm);
	}
    
    a= vec4(a[0], a[1] + 2, a[2], a[3])
    b= vec4(b[0], b[1] + 2, b[2], b[3])
    c= vec4(c[0], c[1] + 2, c[2], c[3])
    
	vBuffer.push(a);
	vBuffer.push(b);
	vBuffer.push(c);
	index+=3;
}
function divideTriangle(a, b, c, count) {
    if ( count > 0 ) {
                
        var ab = mix( a, b, 0.5);
        var ac = mix( a, c, 0.5);
        var bc = mix( b, c, 0.5);
                
        ab = normalize(ab, true);
        ac = normalize(ac, true);
        bc = normalize(bc, true);
                                
        divideTriangle( a, ab, ac, count - 1 );
        divideTriangle( ab, b, bc, count - 1 );
        divideTriangle( bc, c, ac, count - 1 );
        divideTriangle( ab, bc, ac, count - 1 );
    }
    else { 
        triangle( a, b, c );
    }
}


function tetrahedron(a, b, c, d, n) {
    divideTriangle(a, b, c, n);
    divideTriangle(d, c, b, n);
    divideTriangle(a, d, b, n);
    divideTriangle(a, c, d, n);
}




window.onload = function init()
{
    canvas = document.getElementById( "gl-canvas" );
    
    gl = WebGLUtils.setupWebGL( canvas );
    if ( !gl ) { alert( "WebGL isn't available" ); }
  
    //
    //  Configure WebGL
    //
    gl.viewport( 0, 0, canvas.width, canvas.height );
    gl.clearColor( .9, .9, .9, 1 ); //gray for now
	gl.enable(gl.DEPTH_TEST);
    
    var program = initShaders( gl, "vertex-shader", "fragment-shader" );
    gl.useProgram( program );
    
    
    ambientProduct = mult(lightAmbient, materialAmbient);
    diffuseProduct = mult(lightDiffuse, materialDiffuse);
    specularProduct = mult(lightSpecular, materialSpecular);

    //alert("a")
    tetrahedron(va, vb, vc, vd, numTimesToSubdivide);
    //alert("torsoStart")
    //alert(vBuffer.length)
    //alert(nBuffer.length)
    torso();
    //alert("torsoComplete")
    
    //alert(vBuffer.length)
    //alert(nBuffer.length)
	/*
	//Create and associate Vertex buffer
	vBuffer = gl.createBuffer();
    gl.bindBuffer( gl.ARRAY_BUFFER, vBuffer );
    gl.bufferData( gl.ARRAY_BUFFER, 16*MAXNUM, gl.STATIC_DRAW );
	
	var vPosition = gl.getAttribLocation( program, "vPosition" );
    gl.vertexAttribPointer( vPosition, 4, gl.FLOAT, false, 0, 0 );
    gl.enableVertexAttribArray( vPosition );
	
	//Create and associate Color buffer
	cBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, cBuffer);
	gl.bufferData(gl.ARRAY_BUFFER, 16*MAXNUM, gl.STATIC_DRAW);
	
	var vColor = gl.getAttribLocation( program, "vColor");
    gl.vertexAttribPointer(vColor, 4, gl.FLOAT, false, 0, 0);
    gl.enableVertexAttribArray(vColor);
	
	//Create and associate Normal Buffer
	
	nBuffer=gl.createBuffer();
	gl.bindBuffer(gl.ARRAY_BUFFER, nBuffer);
	gl.bufferData(gl.ARRAY_BUFFER, 16*MAXNUM, gl.STATIC_DRAW);
	
	var vNormal = gl.getAttribLocation (program, "vNormal");
	gl.vertexAttribPointer(vNormal,4,gl.FLOAT,false,0,0);
	gl.enableVertexAttribArray(vNormal);
    */
    var nBuffer1 = gl.createBuffer();
    gl.bindBuffer( gl.ARRAY_BUFFER, nBuffer1);
    gl.bufferData( gl.ARRAY_BUFFER, flatten(nBuffer), gl.STATIC_DRAW );
    
    var vNormal = gl.getAttribLocation( program, "vNormal" );
    gl.vertexAttribPointer( vNormal, 4, gl.FLOAT, false, 0, 0 );
    gl.enableVertexAttribArray( vNormal);


    var vBuffer1 = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, vBuffer1);
    gl.bufferData(gl.ARRAY_BUFFER, flatten(vBuffer), gl.STATIC_DRAW);
    
    var vPosition = gl.getAttribLocation( program, "vPosition");
    gl.vertexAttribPointer(vPosition, 4, gl.FLOAT, false, 0, 0);
    gl.enableVertexAttribArray(vPosition);
    
    modelViewMatrixLoc = gl.getUniformLocation( program, "modelViewMatrix" );
    projectionMatrixLoc = gl.getUniformLocation( program, "projectionMatrix" );
    
    //add other gl setup things here for 3d stuffs and whatnot
    gl.uniform4fv( gl.getUniformLocation(program, 
       "ambientProduct"),flatten(ambientProduct) );
    gl.uniform4fv( gl.getUniformLocation(program, 
       "diffuseProduct"),flatten(diffuseProduct) );
    gl.uniform4fv( gl.getUniformLocation(program, 
       "specularProduct"),flatten(specularProduct) );	
    gl.uniform4fv( gl.getUniformLocation(program, 
       "lightPosition"),flatten(lightPosition) );
    gl.uniform1f( gl.getUniformLocation(program, 
       "shininess"),materialShininess );
    
    //add button/key listeners
    document.getElementById("incScore").onclick = function(){score++;};
    
    render();

}
function render()
{
    //do normal render things
    gl.clear( gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
    
    eye = vec3(radius*Math.sin(theta)*Math.cos(phi), 
        radius*Math.sin(theta)*Math.sin(phi), radius*Math.cos(theta));

    modelViewMatrix = lookAt(eye, at , up);
    projectionMatrix = ortho(left, right, bottom, ytop, near, far);
    
    gl.uniformMatrix4fv(modelViewMatrixLoc, false, flatten(modelViewMatrix));
    gl.uniformMatrix4fv(projectionMatrixLoc, false, flatten(projectionMatrix));

    //drawBackground();

    if (score > 0){
        drawHead();   
    }
	if (score > 1){
        drawTorso();  
    }
    if(score > 2){
        drawLeftArm();
    }
	if(score>3){
		drawRightArm();
	}
	if(score>4){
		drawLeftLeg();
	}
	if(score>5){
		drawRightLeg();
	}
     window.requestAnimFrame(render);
}
function drawBackground(){
//push the points and play destiny
}
function drawHead(){
    for( var i=0; i<index; i+=3) 
        gl.drawArrays( gl.TRIANGLES, i, 3 );
}
function drawTorso(){
    gl.drawArrays( gl.TRIANGLES, index, 36 );
}
function drawLeftArm(){
//push the points to the buffers and whatnot
}
function drawRightArm(){
//push the points to the buffers and whatnot
}
function drawLeftLeg(){
//push the points to the buffers and whatnot
}
function drawRightLeg(){
//push the points to the buffers and whatnot
}
